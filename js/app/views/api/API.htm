<div class="container">
    <div class="api">
        <div class="toc" id="toc">
            <h2 class="title header">Table of contents</h2>
            <ul class="section">
                <li>

                    <a href="" class="title">SPAMD</a>

                    <a href="id=errorUtils" class="title">errorUtils</a>
                    <ul class="section">
                        <li><a href="id=errorUtils_showError">showError</a></li>
                    </ul>

                    <a href="id=hash" class="title">hash</a>
                    <ul class="section">
                        <li><a href="id=hash_hash">hash</a></li>
                        <li><a href="id=hash_init">init</a></li>
                        <li><a href="id=hash_update">update</a></li>
                        <li><a href="id=hash_trigger">trigger</a></li>
                    </ul>

                    <a href="id=template-engine" class="title">history</a>
                    <ul class="section">
                        <li><a href="id=template-engine_render">render</a></li>
                    </ul>

                    <a href="id=template-engine" class="title">params</a>
                    <ul class="section">
                        <li><a href="id=template-engine_render">render</a></li>
                    </ul>

                    <a href="id=template-engine" class="title">string</a>
                    <ul class="section">
                        <li><a href="id=template-engine_render">render</a></li>
                    </ul>

                    <a href="id=url" class="title">url</a>
                    <ul class="section">
                        <li><a href="id=viewManager-showView">render</a></li>
                    </ul>

                    <a href="id=template-engine" class="title">utils</a>
                    <ul class="section">
                        <li><a href="id=template-engine_render">render</a></li>
                    </ul>

                    <a href="id=template-engine" class="title">TemplateEngine</a>
                    <ul class="section">
                        <li><a href="id=template-engine_render">render</a></li>
                    </ul>

                    <a href="id=template-engine" class="title">validator</a>
                    <ul class="section">
                        <li><a href="id=template-engine_render">render</a></li>
                    </ul>

                    <a href="id=viewManager" class="title">ViewManager</a>
                    <ul class="section">
                        <li><a href="id=viewManager_showView">showView</a>
                        </li>
                        <li><a href="id=viewManager_showHTML">showHTML</a></li>
                    </ul>

                    <a href="id=viewManager_container" class="title">ViewManager.Container</a>
                    <ul class="section">
                        <li><a href="id=viewManager_container_attach">attach</a></li>
                        <li><a href="id=viewManager_container_cancel">cancel</a></li>
                    </ul>
                </li>
            </ul>

            <ul class="section">
                <li>
                    <a href="id=implicit_api" class="title"><em>Implicit APIs</em></a>
                    <ul class="section">

                        <li><a href="id=onInit">onInit</a></li>
                        <li><a href="id=onDestroy">onDestroy</a></li>
                    </ul> 
                </li>
            </ul>
        </div>

        <div class="content">

            <div>
                <h2>SPAMD API</h2>
                <p>
                    SPAMD provides a small and simple set of utilities for building single page applications (SPA) with jQuery and AMD.
                </p>
                <p>
                    This page lists the complete SPAMD API reference.

                </p>
                <p id="viewManager">
                <h2>
                    View Manager
                </h2>
                <p>ViewManager provides a simple mechanism for switching between views in a Single Page Application.
                </p>
                <p>ViewManager will add views in a pre-defined option called <em>target</em>, a CSS selector. The DOM <em>target</em>
                    defaults to <em class="kw">#container</em>, but can be changed by passing the <em>target</em> option to
                    <em>viewManager.init({target : <span class="kw">"#views"</span>})</em>.
                </p>
                <p>ViewManager specifies
                    a well-defined <em>life cycle</em> for views, consisting of an <em>initialize</em> phase and an optional
                    <em>destroy</em> phase.
                </p>
                <p>To partake in the life cycle, Views are required to implement the <em>onInit</em> method and optionally an <em>onDestroy</em>
                    method.
                </p>
                <p>The main API for ViewManager is the <em>showView</em> and <em>showHTML</em> methods. showView will remove the current view
                    and replace it with a new view. showHTML is for arbitrary HTML templates to be rendered in the DOM.
                </p>
                <p><em>showView</em> returns a list of <em>promises</em>, which the caller can use to interact with the new view at specific
                    points during the rendering phase. showView returns two promises, one for when the view has been <em>attached</em> to
                    the DOM, another for when the view becomes <em>visible</em>.
                </p>
                <p>If animation is switched off, these two events will occur
                    synchronously, one after the other, since when the view is attached to the DOM it becomes automatically visible.
                </p>
                <p>When animation is on, the view will be <em>attached</em> to the DOM, but might not be visible yet. For example using
                    fading animation  as an example, when showView is called, the current view will be faded out, once invisible the
                    current view will be removed and the new view attached. At this stage the new view is attached but not yet visible.
                    Next the new view is faded in and becomes visible.
                </p>
                <p>It is common after the <em>attached</em> event to enhance certain view components, ie alter a normal table to a
                    <a href="https://datatables.net/" target="_blank">DataTables</a> component. This is best done before the view becomes <em>visible</em> otherwise users
                    could see the DOM changes where the tables become datatables.
                </p>
                <p>The <em>visible</em> event is useful for DOM manipulations which requires the view to be visible such as manipulating the
                    size or positions of elements.
                </p>
            </div>

            <div id="viewManager_init" class="method">
                <span class="methodName">init</span><code class="methodSig">viewManager.init(options)</code>
                <p>
                    Initializes the ViewManager with the given options.
                </p>
                

            </div>

            <div id="viewManager_showView" class="method">
                <p>

                    <span class="methodName">showView</span><code class="methodSig">viewManager.showView(options) -> <i>promise</i></code>
                <p>Replace the current view with the new given <em>view</em> in the DOM. The new view is added to the ViewManager's default
                    <em>target</em> (a CSS selector), but a different target can be specified in showView's <em>options</em>.
                </p>

                <div><i>Arguments:</i></div>
                <div class="object">
                    <strong>options</strong>
                    <div><code><i>type:</i> Object</code></div>
                    <ul>
                        <li><strong>view</strong><code>(required)</code>
                            <div><code><i>type:</i> Function() or Object</code></div>                            
                            <div>an instance of a view object or a function that creates a view</div>
                        </li>
                        <li><strong>target</strong> <code>(default: the ViewManager's target)</code>
                            <div><code><i>type:</i> String</code></div>
                            <div>a CSS selector where the view must be added to, the current view at the target in the DOM will be removed</div>
                        </li>

                    </ul>
                </div>

                <div><i>Return:</i></div>
                <div class="object">
                    <strong>promise</strong>
                    <div><code><i>type:</i> Promise</code></div>
                    <div>a promise for when the view becomes visible</div>
                    <div>The promise also contains properties, other promises for different DOM events as shown below:</div>
                    <ul>
                        <li><strong>attached</strong>
                            <div><code><i>type:</i> Promise</code></div>
                            <div>a promise for when the view is attached to the DOM</div>
                        </li>
                        <li><strong>visible</strong>
                            <div><code><i>type:</i> Promise</code></div>
                            <div>a promise for when the view becomes visible. This is analogous to the returned promise above. 
                                This promise is just makes it clearer when the promise will occur.</div>
                        </li>

                    </ul>
                </div>

                <div><i>Examples:</i></div>

                <p>
                    Replace the current view with the new view and returns a promise when the view is <em>visible</em>. The promise will be
                    passed an instance of the new view.
                </p>
                <pre class="prettyprint">
var promise = viewManager.showView({view: HomeView});
promise.then(function(view) {
// View is visible
}); </pre>
                <p>The returned <em>promise</em> also contains other promises as member variables, one promise for the <em>attached</em>
                    phase and one for the <em>visible</em> phase/ The <em>visible</em> member is an alias for the returned promise as they
                    both execute when the view becomes visible.
                </p>
                <pre class="prettyprint">
var promise = viewManager.showView({view: HomeView});
promise.then(function(view) {
  // View is visible
});

promise.visible.then(function(view) {
  // View is visible
});
promise.attached.then(function(view) {
  // View is attached but not yet visible
}); </pre>
            </div>

            <div id="viewManager_showHTML">
                <h2>
                    showHTML
                </h2>
                asd
                f
                asdf
                asd
                fds
                afads
                fds
            </div>

            <div id="viewManager_container">
                <h2>
                    ViewManager.Container
                </h2>
                asd
                f
                asdf
                asd
                fds
                afads
                fds
            </div>

            <div id="implicit_api">
                <h2>Implicit APIs</h2>
                <p>
                    Here we document SPAMD's implicit APIs. These APIs are functions that SPAMD expects users to implement. This API 
                    consists of the <code>onInit</code> and <code>onDestroy</code> methods for views.
                </p>

                <span class="methodName" id="onInit">onInit</span><code class="methodSig">onInit(container, options)</code>

                <p>Views must implement an <em>onInit</em> method that SPAMD will call to inform the view to initialize itself. Once the
                    view is initialized, it must inform the ViewManager that it is ready and provide the ViewManager with HTML to render.
                    It does so through the <em>container</em> argument.
                </p>

                <div><i>Arguments:</i></div>
                <div class="object">
                    <strong>container</strong> (documented <a href="id=viewManager_container" class="self">here</a>)
                    <div><code><i>type:</i> Function</code></div>
                    <ul>
                        <li><strong>params</strong><code></code>
                            <div><code><i>type:</i> Function() or Object</code></div>
                            <div>an instance of a view object or a function that creates a view</div>
                        </li>
                        <li><strong>hash</strong> <code></code>
                            <div><code><i>type:</i> String</code></div>
                            <div>hash can be used to listen to hash changes: <br/><code>on(options.hash, "onHashChange", function(e, options) {})</code></div>
                        </li>

                    </ul>
                </div>
                <div class="object">
                    <strong>options</strong>
                    <div><code><i>type:</i> Object</code></div>
                    <ul>
                        <li><strong>view</strong><code>(required)</code>
                            <div><code><i>type:</i> Function() or Object</code></div>                            
                            <div>an instance of a view object or a function that creates a view</div>
                        </li>
                        <li><strong>hash</strong> <code></code>
                            <div><code><i>type:</i> String</code></div>
                            <div>hash can be used to listen to hash changes: <br/><code>on(options.hash, "onHashChange", function(e, options) {})</code></div>
                        </li>

                    </ul>
                </div>

                <span class="methodName" id="onDestroy">onDestroy</span><code class="methodSig">onDestroy(options)</code>

                <p>If views wan to to be informed when they are going to be removed, they can implement <em>onDestroy</em> method. SPAMD will
                    call this method if available on the view, when the view is to be removed. Views can use the onDestroy method to perform
                    any cleanup operations, such as storing it's data for later retrieval or unsubscribing listeners etc.
                </p>

                <div><i>Arguments:</i></div>
                <div class="object">
                    <strong>options</strong>
                    <div><code><i>type:</i> Object</code></div>
                    <ul>
                        <li><strong>view</strong><code>(required)</code>
                            <div><code><i>type:</i> Function() or Object</code></div>                            
                            <div>an instance of a view object or a function that creates a view</div>
                        </li>
                        <li><strong>hash</strong> <code></code>
                            <div><code><i>type:</i> String</code></div>
                            <div>hash can be used to listen to hash changes: <br/><code>on(options.hash, "onHashChange", function(e, options) {})</code></div>
                        </li>

                    </ul>
                </div>


            </div>

        </div>
    </div>
</div>
